diff --git a/xv6/Makefile b/xv6/Makefile
index 09d790c..d0add95 100644
--- a/xv6/Makefile
+++ b/xv6/Makefile
@@ -181,6 +181,7 @@ UPROGS=\
 	_usertests\
 	_wc\
 	_zombie\
+	_test\
 
 fs.img: mkfs README $(UPROGS)
 	./mkfs fs.img README $(UPROGS)
@@ -217,7 +218,9 @@ QEMUGDB = $(shell if $(QEMU) -help | grep -q '^-gdb'; \
 	then echo "-gdb tcp::$(GDBPORT)"; \
 	else echo "-s -p $(GDBPORT)"; fi)
 ifndef CPUS
-CPUS := 2
+# Edit to CPUS - changes num of CPUs used from 2 -> 1 
+# helps make debugging and understanding the scheduler output easier
+CPUS := 1
 endif
 QEMUOPTS = -drive file=fs.img,index=1,media=disk,format=raw -drive file=xv6.img,index=0,media=disk,format=raw -smp $(CPUS) -m 512 $(QEMUEXTRA)
 
diff --git a/xv6/defs.h b/xv6/defs.h
index 82fb982..d713fcd 100644
--- a/xv6/defs.h
+++ b/xv6/defs.h
@@ -120,6 +120,7 @@ void            userinit(void);
 int             wait(void);
 void            wakeup(void*);
 void            yield(void);
+void            set_prior(int prior_lvl);
 
 // swtch.S
 void            swtch(struct context**, struct context*);
diff --git a/xv6/proc.c b/xv6/proc.c
index 806b1b1..8865953 100644
--- a/xv6/proc.c
+++ b/xv6/proc.c
@@ -88,6 +88,9 @@ allocproc(void)
 found:
   p->state = EMBRYO;
   p->pid = nextpid++;
+  p->priority = 10; // edit - initialized priority property for processes to be 0 (highest val)
+  p->start_time = ticks;
+  p->burst_time = 0;
 
   release(&ptable.lock);
 
@@ -200,6 +203,9 @@ fork(void)
   np->parent = curproc;
   *np->tf = *curproc->tf;
 
+  np->priority = curproc->priority; // setting child priority val to parent's priority val
+  np->burst_time = 0; //setting child burst time to 0
+
   // Clear %eax so that fork returns 0 in the child.
   np->tf->eax = 0;
 
@@ -231,6 +237,11 @@ exit(void)
   struct proc *p;
   int fd;
 
+  // DECREASE PRIORITY IF EXITED
+  if(curproc->priority < 31){
+    curproc->priority = curproc->priority + 1;
+  }
+
   if(curproc == initproc)
     panic("init exiting");
 
@@ -246,6 +257,11 @@ exit(void)
   iput(curproc->cwd);
   end_op();
   curproc->cwd = 0;
+  curproc->end_time = ticks;
+
+  cprintf("\nTurnaround time is %d \n", curproc->end_time - curproc->start_time);
+  cprintf("\nWaiting time is %d with burst time of %d \n\n", curproc->end_time - curproc->start_time - curproc->burst_time, curproc->burst_time);
+
 
   acquire(&ptable.lock);
 
@@ -275,6 +291,11 @@ wait(void)
   struct proc *p;
   int havekids, pid;
   struct proc *curproc = myproc();
+
+  // IF WAITING THEN INCREASE PRIORITY 
+  if (curproc->priority > 0) {
+    curproc->priority = curproc->priority - 1;
+  }
   
   acquire(&ptable.lock);
   for(;;){
@@ -286,6 +307,11 @@ wait(void)
       havekids = 1;
       if(p->state == ZOMBIE){
         // Found one.
+        if(curproc->priority < p->priority) {
+          int temp = curproc->priority ;
+          curproc->priority = p->priority;
+          p->priority = temp;
+        }
         pid = p->pid;
         kfree(p->kstack);
         p->kstack = 0;
@@ -306,7 +332,7 @@ wait(void)
       return -1;
     }
 
-    // Wait for children to exit.  (See wakeup1 call in proc_exit.)
+    // Wait for children to exit.  (See wakeup1 call in proc_exit.
     sleep(curproc, &ptable.lock);  //DOC: wait-sleep
   }
 }
@@ -325,23 +351,42 @@ scheduler(void)
   struct proc *p;
   struct cpu *c = mycpu();
   c->proc = 0;
+  int highest_priority;
+  int burst_start;
+  int burst_end;
   
   for(;;){
     // Enable interrupts on this processor.
     sti();
 
     // Loop over process table looking for process to run.
+    highest_priority = 31;
     acquire(&ptable.lock);
-    for(p = ptable.proc; p < &ptable.proc[NPROC]; p++){
+      for(p = ptable.proc; p < &ptable.proc[NPROC]; p++){
+          if (p->state == RUNNABLE && p->priority < highest_priority) {
+              highest_priority = p->priority;
+          }
+      }
+
+      for(p = ptable.proc; p < &ptable.proc[NPROC]; p++){
       if(p->state != RUNNABLE)
         continue;
 
+      if(p->priority != highest_priority){
+          if (p->priority > 0) {
+              p->priority = p->priority - 1;
+          }
+          continue;
+      }
+
       // Switch to chosen process.  It is the process's job
       // to release ptable.lock and then reacquire it
       // before jumping back to us.
+      burst_start = ticks;
       c->proc = p;
       switchuvm(p);
       p->state = RUNNING;
+      p->priority++;
 
       swtch(&(c->scheduler), p->context);
       switchkvm();
@@ -349,9 +394,11 @@ scheduler(void)
       // Process is done running for now.
       // It should have changed its p->state before coming back.
       c->proc = 0;
+      burst_end = ticks;
+      p->burst_time += (burst_end - burst_start);
     }
-    release(&ptable.lock);
 
+    release(&ptable.lock);
   }
 }
 
@@ -532,3 +579,11 @@ procdump(void)
     cprintf("\n");
   }
 }
+
+// == NEW SYSTEM CALL - setPriority == 
+void set_prior(int prior_lvl) {
+  struct proc *currProc = myproc(); // gets the current process that's going on 
+  currProc->priority = prior_lvl; // assigns the priority level passed in to the current process 
+
+  yield(); // returns control back to the schedule bc of how the priority value has changed
+}
\ No newline at end of file
diff --git a/xv6/proc.h b/xv6/proc.h
index 1647114..7a073da 100644
--- a/xv6/proc.h
+++ b/xv6/proc.h
@@ -49,6 +49,10 @@ struct proc {
   struct file *ofile[NOFILE];  // Open files
   struct inode *cwd;           // Current directory
   char name[16];               // Process name (debugging)
+  int priority;                // Adds a priority value to each process (can range from 1 to 31) -- edit
+  int start_time;
+  int end_time;
+  int burst_time;
 };
 
 // Process memory is laid out contiguously, low addresses first:
diff --git a/xv6/syscall.c b/xv6/syscall.c
index ee85261..7ac8f99 100644
--- a/xv6/syscall.c
+++ b/xv6/syscall.c
@@ -103,6 +103,7 @@ extern int sys_unlink(void);
 extern int sys_wait(void);
 extern int sys_write(void);
 extern int sys_uptime(void);
+extern int sys_set_prior(void); // edit --
 
 static int (*syscalls[])(void) = {
 [SYS_fork]    sys_fork,
@@ -126,6 +127,7 @@ static int (*syscalls[])(void) = {
 [SYS_link]    sys_link,
 [SYS_mkdir]   sys_mkdir,
 [SYS_close]   sys_close,
+[SYS_set_prior] sys_set_prior // edit --
 };
 
 void
diff --git a/xv6/syscall.h b/xv6/syscall.h
index bc5f356..e419ec7 100644
--- a/xv6/syscall.h
+++ b/xv6/syscall.h
@@ -20,3 +20,4 @@
 #define SYS_link   19
 #define SYS_mkdir  20
 #define SYS_close  21
+#define SYS_set_prior 22 // edit - sys to set priority of process
diff --git a/xv6/sysproc.c b/xv6/sysproc.c
index 0686d29..70d3de9 100644
--- a/xv6/sysproc.c
+++ b/xv6/sysproc.c
@@ -89,3 +89,21 @@ sys_uptime(void)
   release(&tickslock);
   return xticks;
 }
+
+// == NEW SYSTEM CALL - setPriority == 
+int sys_set_prior(void) {
+  int priority;
+
+  /* == argint() breakdown ==
+      * can't pass arguments from user-level functions to kernel-level functions in xv6
+      * argint() comes into play here
+      * helps pass in arguments into a kernel function 
+      * to pass in integers --> argint() is called  
+  */
+  if(argint(0, &priority) < 0) {
+    return -1;
+  }
+
+  set_prior(priority);
+  return 0;
+}
diff --git a/xv6/test.c b/xv6/test.c
new file mode 100644
index 0000000..b6ab9c1
--- /dev/null
+++ b/xv6/test.c
@@ -0,0 +1,82 @@
+//this version removes the parameters for exit() and wait()
+#include "types.h"
+#include "user.h"
+
+int PScheduler(void);
+int test_scheduler_performance();
+int test_scheduler_performance_fork();
+
+int main(int argc, char *argv[])
+{
+    PScheduler();
+    test_scheduler_performance();
+    test_scheduler_performance_fork();
+    exit();
+    return 0;
+}    
+
+int test_scheduler_performance(void) {
+    printf(1, "Process with PID %d\n\n", getpid());
+    wait();
+    exit();
+    return 0;
+}
+
+int test_scheduler_performance_fork(void) {
+    int pid = fork();
+    if (pid == 0) {
+        printf(1, "CHILD Process with PID %d\n\n", getpid());
+        exit();
+    } else {
+        wait();
+        printf(1, "PARENT Process with PID %d\n\n", getpid());
+        exit();
+    }
+    return 0;
+}
+      
+int PScheduler(void){
+		 
+    // Use this part to test the priority scheduler. Assuming that the priorities range between range between 0 to 31
+    // 0 is the highest priority. All processes have a default priority of 10
+    // You can use your own priority range/value setup
+
+    int pid, ret_pid;
+    int i,j,k;
+  
+    printf(1, "Testing the priority scheduler and setpriority system call:\n");
+    printf(1, "Assuming that the priorities range between range between 0 to 31\n");
+    printf(1, "0 is the highest priority. All processes have a default priority of 10\n");
+    printf(1, " - The parent processes will switch to priority 0\n");
+    set_prior(0); // Use your own setpriority interface
+    for (i = 0; i < 3; i++) {
+	pid = fork();
+	if (pid > 0) {
+            continue;
+        } else if ( pid == 0) {
+            printf(1, " - Hello! this is child# %d and I will change my priority to %d \n", getpid(), 60 - 20 * i);
+            set_prior(30 - 10 * i); // Use your own setpriority interface
+            for (j = 0; j < 50000; j++) {
+                asm("nop");
+                for(k = 0; k < 10000; k++) {
+                    asm("nop"); 
+                }
+            }
+            printf(1, " - Child #%d with priority %d has finished! \n", getpid(), 30-10*i);		
+            exit();
+        } else {
+            printf(2," \n Error fork() \n");
+            exit();
+        }
+    }
+
+    if(pid > 0) {
+        for (i = 0; i < 3; i++) {
+            ret_pid = wait();
+            printf(1, " - This is the parent: child with PID# %d has finished with status %d \n", ret_pid);
+        }
+        printf(1, " - If processes with highest priority finished first then its correct. \n");
+    }
+			
+    return 0;
+}
\ No newline at end of file
diff --git a/xv6/user.h b/xv6/user.h
index 4f99c52..9667ce0 100644
--- a/xv6/user.h
+++ b/xv6/user.h
@@ -23,6 +23,7 @@ int getpid(void);
 char* sbrk(int);
 int sleep(int);
 int uptime(void);
+void set_prior(int prior_lvl);
 
 // ulib.c
 int stat(const char*, struct stat*);
diff --git a/xv6/usys.S b/xv6/usys.S
index 8bfd8a1..2ea9228 100644
--- a/xv6/usys.S
+++ b/xv6/usys.S
@@ -29,3 +29,4 @@ SYSCALL(getpid)
 SYSCALL(sbrk)
 SYSCALL(sleep)
 SYSCALL(uptime)
+SYSCALL(set_prior) 
